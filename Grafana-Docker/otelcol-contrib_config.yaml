receivers:
  # Collect Windows performance counters
  windowsperfcounters:
    metrics:
      processor.time.total:
        description: Total CPU active and idle time        
        gauge:
    collection_interval: 5s
    perfcounters:
      - object: "Processor"
        instances:
            - "_Total"
        counters:
          - name: "% Processor Time"
            metric: processor.time.total
          
      # - object: "Processor"
        # instances:
            # - "_Total"
        # counters:
          # - name: "% Processor Time"
            # metric: processor.time.total
            
      # - object: "Memory"
        # counters:
          # - name: "memory.committed"
            # # metric: "windows.memory.committed"
          # - name: "memory.available"
      # - object: "PhysicalDisk"
        # instances: ["_Total"]
        # counters:
          # - name: "disk.read.bytes"
            # # metric: "windows.disk.read_bytes"
          # - name: "disk.write.bytes"
            # # metric: "windows.disk.write.bytes"
      # - object: "Network Interface"
        # instances: ["*"]
        # counters:
          # - name: "network.bytes.sent"
            # # metric: "windows.network.bytes.sent"
          # - name: "network.bytes.received"
            # # metric: "windows.network.bytes.received"
 
      
      
      
  # Collect Windows Event Logs (System & Application)
  windowseventlog:
    channel: System
    start_at: end
  windowseventlog/app:
    channel: Application
    start_at: end

  # Receive OTLP telemetry from apps (like ASP.NET Core)
  otlp:
    protocols:
      grpc:
      http:
        include_metadata: true  # ⬅️ Required for header forwarding

  prometheus:
    scrape_interval: 15s
    config:
      scrape_configs:
        - job_name: "sql_exporter"
          static_configs:
            - targets: ["localhost:9399"]
        - job_name: "otel-collector"
          static_configs:
            - targets: ["localhost:9464"]
  
  windowsperfcounters/wcf:
    metrics:
      wcf.requests:
        description: the number of wcf requests
        unit: By
        gauge:
        
    collection_interval: 30s
    perfcounters:
      - object: "ServiceModelOperation 4.0.0.0"
        instances: ["*"]
        counters:
          - name: "Calls"
            metric: wcf.requests
          - name: "Calls Per Second"
          - name: "Calls Outstanding"
          - name: "Calls Failed"

      # - object: "ServiceModelEndpoint 4.0.0.0"
        # instances: ["*"]
        # counters:
          # - name: "Messages Sent/sec"
          # - name: "Messages Received/sec"

              
exporters:
  # Data sources: traces, metrics, logs
  file:
    path: ./exported-data.json

  # Data sources: traces
  otlp/jaeger:
    endpoint: jaeger-server:4317
  
  # Data sources: traces, metrics, logs
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`
  debug:
    verbosity: detailed

  # Data sources: traces, metrics, logs
  # otlp:
    # endpoint: http://localhost:4317
    # tls:
      # insecure: true
  # # Data sources: traces, metrics
  # otlphttp:
    # endpoint: http://localhost:4318
    # tls:
      # insecure: true

  # Data sources: metrics
  prometheus:
    endpoint: 0.0.0.0:8889
    # namespace: default

  otlp/tempo:
    endpoint: "localhost:14319"
    auth:
      authenticator: headers_setter
    tls:
      insecure: true
      
  # loki:
    # endpoint: "http://localhost:3100/loki/api/v1/push"
    # default_labels_enabled:
      # exporter: true
      # job: true
      # instance: true
      
  otlphttp/loki: 
    # https://grafana.com/docs/loki/latest/send-data/otel/
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/release/v0.130.x/exporter/lokiexporter/README.md#migration-instructions
    # https://github.com/grafana/grafana-opentelemetry-dotnet/blob/main/docs/configuration.md
    #endpoint: http://localhost:3100/otlp/v1/logs
    endpoint: http://localhost:3100/otlp

      
  # Data sources: metrics
  # prometheusremotewrite:
    # endpoint: http://prometheus.example.com:9411/api/prom/push
    # When using the official Prometheus (running via Docker)
    # endpoint: 'http://prometheus:9090/api/v1/write', add:
    # tls:
    #   insecure: true

  # Data sources: traces
  # zipkin:
    # endpoint: http://localhost:9411/api/v2/spans

processors:
  batch:
    metadata_keys:
      - X-Scope-OrgID
      
  resource/add_tenant:
    attributes:
      - key: X-Scope-OrgID
        action: upsert
        from_attribute: http.header.x-scope-orgid  # ⬅️ Read tenant header
  

# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/headerssetterextension/README.md
extensions:
  headers_setter:
    headers:
      - action: upsert
        key: X-Scope-OrgID
        from_context: X-Scope-OrgID
        
service:
  extensions: [headers_setter]
  telemetry:
    logs:
      level: debug
  
  pipelines:
    metrics:
      receivers: [prometheus,windowsperfcounters,windowsperfcounters/wcf,otlp]      
      # receivers: [otlp]
      processors: [batch]
      # exporters: [prometheus,debug]
      exporters: [prometheus]
    
    logs:
      receivers: [windowseventlog, windowseventlog/app, otlp]
      # receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/loki,debug]
      # exporters: [debug]

    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/tempo,debug]
      # exporters: [debug]