receivers:
  # Collect Windows performance counters
  windowsperfcounters:
    metrics:
      processor.time.total:
        description: Total CPU active and idle time
        unit: "%"
        gauge:
    collection_interval: 5s
    perfcounters:
      - object: "Processor"
        instances:
            - "_Total"
        counters:
          - name: "% Processor Time"
            metric: processor.time.total
          
      # - object: "Processor"
        # instances:
            # - "_Total"
        # counters:
          # - name: "% Processor Time"
            # metric: processor.time.total
            
      # - object: "Memory"
        # counters:
          # - name: "memory.committed"
            # # metric: "windows.memory.committed"
          # - name: "memory.available"
      # - object: "PhysicalDisk"
        # instances: ["_Total"]
        # counters:
          # - name: "disk.read.bytes"
            # # metric: "windows.disk.read_bytes"
          # - name: "disk.write.bytes"
            # # metric: "windows.disk.write.bytes"
      # - object: "Network Interface"
        # instances: ["*"]
        # counters:
          # - name: "network.bytes.sent"
            # # metric: "windows.network.bytes.sent"
          # - name: "network.bytes.received"
            # # metric: "windows.network.bytes.received"
 
      
      
      
  # Collect Windows Event Logs (System & Application)
  windowseventlog:
    channel: System
    start_at: end
  windowseventlog/app:
    channel: Application
    start_at: end

  # Receive OTLP telemetry from apps (like ASP.NET Core)
  otlp:
    protocols:
      grpc:
        include_metadata: true
      http:
        include_metadata: true

  windowsperfcounters/wcf:
    metrics:
      wcf.requests:
        description: the number of wcf requests
        unit: By
        gauge:
        
    collection_interval: 30s
    perfcounters:
      - object: "ServiceModelOperation 4.0.0.0"
        instances: ["*"]
        counters:
          - name: "Calls"
            metric: wcf.requests
          - name: "Calls Per Second"
          - name: "Calls Outstanding"
          - name: "Calls Failed"

      # - object: "ServiceModelEndpoint 4.0.0.0"
        # instances: ["*"]
        # counters:
          # - name: "Messages Sent/sec"
          # - name: "Messages Received/sec"

              
exporters:
  # Data sources: traces, metrics, logs
  file:
    path: ./exported-data.json

  # Data sources: traces
  otlp/jaeger:
    endpoint: jaeger-server:4317
  
  # Data sources: traces, metrics, logs
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`
  debug:
    verbosity: detailed

  # Data sources: traces, metrics, logs
  # otlp:
    # endpoint: http://localhost:4317
    # tls:
      # insecure: true
  # # Data sources: traces, metrics
  # otlphttp:
    # endpoint: http://localhost:4318
    # tls:
      # insecure: true

  # # Data sources: metrics
  # prometheus:
  #   endpoint: 0.0.0.0:8889    
  #   # namespace: default
  #   send_timestamps: true
  #   resource_to_telemetry_conversion:
  #     enabled: true 
    
  otlp/tempo:
    endpoint: "localhost:14319"
    auth:
      authenticator: headers_setter
    tls:
      insecure: true
      
  # loki:
    # endpoint: "http://localhost:3100/loki/api/v1/push"
    # default_labels_enabled:
      # exporter: true
      # job: true
      # instance: true
      
  otlphttp/loki: 
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/release/v0.130.x/exporter/lokiexporter/README.md#migration-instructions
    # https://github.com/grafana/grafana-opentelemetry-dotnet/blob/main/docs/configuration.md
    #endpoint: http://localhost:3100/otlp/v1/logs
    endpoint: http://localhost:3100/otlp
    auth:
      authenticator: headers_setter

    # labels:
      # attributes:
        # trace_id: traceid
        # span_id: spanid
  
  # https://grafana.com/docs/mimir/latest/configure/configure-otel-collector/#configure-the-opentelemetry-collector-to-write-metrics-into-mimir
  # https://grafana.com/docs/mimir/latest/manage/secure/authentication-and-authorization/
  otlphttp/mimir:
    endpoint: http://localhost:9009/otlp
    # endpoint: http://localhost:8000/otlp
    auth:
      authenticator: headers_setter
    tls:
      insecure: true

  otlphttp/prometheus:
    endpoint: http://localhost:9090/api/v1/otlp
    # endpoint: http://localhost:8000?http://localhost:9090/api/v1/otlp
    auth:
      authenticator: headers_setter
    tls:
      insecure: true
    
  # Data sources: metrics
  # https://grafana.com/docs/mimir/latest/configure/configure-otel-collector
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/prometheusremotewriteexporter/README.md
  prometheusremotewrite:
    endpoint: http://localhost:9009/api/v1/push
    # endpoint: http://localhost:8000/api/v1/push
    auth:
      authenticator: headers_setter
    # When using the official Prometheus (running via Docker)
    # endpoint: 'http://prometheus:9090/api/v1/write'
    tls:
      insecure: true
    resource_to_telemetry_conversion:
      enabled: true # Convert resource attributes to metric labels
    # protobuf_message: io.prometheus.write.v2.Request
      

  # Data sources: traces
  # zipkin:
    # endpoint: http://localhost:9411/api/v2/spans

processors:
  batch:
    timeout: 5s
    send_batch_size: 100
    metadata_keys:
      - X-Scope-OrgID
  
  attributes/header_to_resource:
    actions:
      # pull X-Scope-OrgID from incoming request header and insert into resource attr x_scope_orgid
      - action: upsert
        key: x_scope_orgid
        from_context: request.header.x-scope-orgid
        # default: unknown
        # target: resource


# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/headerssetterextension/README.md
extensions:
  headers_setter:
    headers:
      - action: upsert
        key: X-Scope-OrgID
        # from_context: request.header.x-scope-orgid
        from_context: X-Scope-OrgID
        # default_value: tenant2
  
service:
  extensions: [headers_setter]
  telemetry:
    # https://opentelemetry.io/docs/collector/internal-telemetry/
    metrics: #collector own telemetry is exposed
      readers:
        - pull:
            exporter: 
              prometheus:
                # endpoint: 0.0.0.0:8989
                host: "0.0.0.0"
                port: 8989
    logs:
      level: debug
      
  pipelines:
    metrics:
      # receivers: [windowsperfcounters,windowsperfcounters/wcf,otlp]
      receivers: [otlp]
      # processors: [attributes/header_to_resource]
      processors: [batch]
      exporters: [otlphttp/mimir,file]
      # exporters: [prometheusremotewrite,file]
      # exporters: [prometheusremotewrite,prometheus,file]
    
    logs:
      #receivers: [windowseventlog, windowseventlog/app, otlp]
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/loki]
      #  exporters: [debug]

    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/tempo]